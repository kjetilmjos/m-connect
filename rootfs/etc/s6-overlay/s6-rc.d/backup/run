#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: m-connect
# Runs backup tasks
# ==============================================================================
declare backup_enable
declare host
declare username
declare password
backup_enable=false
bashio::log.info "---------Backup status---------"

# Get config input from addon UI
if bashio::config.has_value "server.enable_backup"; then
    backup_enable=$(bashio::config "server.enable_backup")
fi

#bashio::exit.die_if_false $backup_enable "Backup is disabled. Backup startup script will stop"
if [[ $backup_enable = false ]]; then
    bashio::log.warning
    bashio::log.warning "Backup is disabled. Backup creation will not happen. "
    bashio::log.warning "Backup function will go into sleep mode. Restart addon to start backup functionality again "
    bashio::log.warning
    sleep 365d
fi

if bashio::config.has_value "server.host"; then
    host=$(bashio::config "server.host")
fi
if bashio::config.has_value "server.username"; then
    username=$(bashio::config "server.username")
fi
if bashio::config.has_value "server.password"; then
    password=$(bashio::config "server.password")
fi

USERNAME="$username"
FILE_DESTINATION="$USERNAME@$host:/m-connect/$USERNAME"
FILE_SOURCE="/home/$USERNAME.tar"

# Get the supervisor token from os environment
SUPER_TOKEN=${SUPERVISOR_TOKEN}
AllBackups=$(curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" http://supervisor/backups/info)
#{"result": "ok", "data": {"backups": [{"slug": "1cf71bc8", "name": "March 19, 2023", "date": "2023-03-19T10:48:49.318177+00:00", "type": "partial", "size": 0.01, "protected": false, "compressed": true, "content": {"homeassistant": false, "addons": [], "folders": []}}, {"slug": "04ae5d15", "name": "", "date": "2023-03-11T12:16:56.579912+00:00", "type": "full", "size": 37.88, "protected": false, "compressed": true, "content": {"homeassistant": true, "addons": ["ae6e943c_remote_api", "local_m_connect"], "folders": ["share", "addons/local", "ssl", "media"]}}, {"slug": "9aafc5d0", "name": "", "date": "2023-03-11T12:06:27.216771+00:00", "type": "full", "size": 37.88, "protected": false, "compressed": true, "content": {"homeassistant": true, "addons": ["ae6e943c_remote_api", "local_m_connect"], "folders": ["share", "addons/local", "ssl", "media"]}}, {"slug": "64db2fba", "name": "", "date": "2023-03-11T12:27:25.780668+00:00", "type": "full", "size": 37.88, "protected": false, "compressed": true, "content": {"homeassistant": true, "addons": ["ae6e943c_remote_api", "local_m_connect"], "folders": ["share", "addons/local", "ssl", "media"]}}, {"slug": "e421a9ce", "name": "", "date": "2023-03-11T11:55:57.916416+00:00", "type": "full", "size": 37.88, "protected": false, "compressed": true, "content": {"homeassistant": true, "addons": ["ae6e943c_remote_api", "local_m_connect"], "folders": ["share", "addons/local", "ssl", "media"]}}], "days_until_stale": 30}}

#Find timestamp
CURRENT_TIMESTAMP=$(date +%s)  # get the current timestamp in seconds since Unix epoch
TARGET_TIMESTAMP=$(( CURRENT_TIMESTAMP - 82800 ))  # subtract 23 hours from the current timestamp. To make sure the backup creation time is accounted for.

# Get the slug of the newest FULL backup type
jq_command='.data.backups
 | map(select(.type == "full"))
 | sort_by(.date)
 | .[-1]'

LATEST_BACKUP=$(jq -r "$jq_command" <<< "$AllBackups")
LATEST_BACKUP_SLUG=$(jq -r ".slug" <<< "$LATEST_BACKUP")

if [[ -z "$LATEST_BACKUP" || "$LATEST_BACKUP" = "null" ]]
then
# No exisitng backup found. A new one is needed.
bashio::log.info
bashio::log.info "A new backup is needed and will be created. This can take some time..."
bashio::log.info

BACKUP_SLUG=$(curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" -X POST http://supervisor/backups/new/full | jq -r '.data.slug')
#Result = {"result": "ok", "data": {"slug": "3d8be061"}}
DOWNLOAD_URL="http://supervisor/backups/$BACKUP_SLUG/download"
curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" "$DOWNLOAD_URL" > $FILE_SOURCE
else
#DATE_LATEST=$(echo $LATEST_BACKUP | jq -r ".date")
DATE_LATEST=$(jq -r '.date' <<< "$LATEST_BACKUP")
TIMESTAMP_LATEST=$(date -d $DATE_LATEST +%s)

if [[ $TIMESTAMP_LATEST -gt $TARGET_TIMESTAMP ]]
then
bashio::log.info
bashio::log.info "An exisiting backup is newer than created by the script. The manual created backup will be synched."
bashio::log.info
DOWNLOAD_URL="http://supervisor/backups/$LATEST_BACKUP_SLUG/download"

curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" "$DOWNLOAD_URL" > $FILE_SOURCE
BACKUP_SLUG=$LATEST_BACKUP_SLUG

elif [[ $TARGET_TIMESTAMP -gt $TIMESTAMP_LATEST  ]]
then
# Existing backup is older than timestamp.
bashio::log.info
bashio::log.info "A new backup is needed and will be created. This can take some time..."
bashio::log.info

BACKUP_SLUG=$(curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" -X POST http://supervisor/backups/new/full | jq -r '.data.slug')
DOWNLOAD_URL="http://supervisor/backups/$BACKUP_SLUG/download"
curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" "$DOWNLOAD_URL" > $FILE_SOURCE
else
bashio::log.warning "The backup did not do any action"
fi
fi

# Turn off "exit on error" option
set +e
sshpass -p "$password" rsync $FILE_SOURCE $FILE_DESTINATION 2>&1 | tee /tmp/rsync.log
RSYNC_EXIT_STATUS=${PIPESTATUS[0]}
# Turn "exit on error" option back on
set -e

if [ $RSYNC_EXIT_STATUS -eq 0 ]; then
    bashio::log.info
    bashio::log.info "Backup synchronized successfully to m-cloud"
    bashio::log.info
    curl -sSL -H "Authorization: Bearer $SUPER_TOKEN" -X DELETE "http://supervisor/backups/$BACKUP_SLUG"
    rm $FILE_SOURCE
else
    bashio::log.error
    bashio::log.error "Backup functionality enabled, but unable to synchronize backup to m-cloud."
    bashio::log.error

fi

sleep 1d