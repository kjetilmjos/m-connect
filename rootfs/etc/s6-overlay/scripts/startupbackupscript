#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Add-on: m-connect
# Creates the backup configuration
# ==============================================================================
declare username

if bashio::config.has_value "server.username"; then
    username=$(bashio::config "server.username")
fi

# Wireguard configuration directory
if bashio::fs.directory_exists '/data/backup_cred'; then
    bashio::log.info "An existing directory was found. A new one will not be generated"
    if bashio::fs.file_exists "/data/backup_cred/$username.pub"; then
        bashio::log.info "An existing ssh identity was found. A new one will not be generated"
        pubkey=$(cat "/data/backup_cred/$username.pub")
        bashio::log.info "The ssh public key is: $pubkey"
        bashio::exit.ok
    else
    ssh-keygen -t ed25519 -C "$username" -f /data/backup_cred/$username -P ""
    eval "$(ssh-agent -s)"
    ssh-add /data/backup_cred/$username

    #Print the SSH public key
    pubkey=$(cat "/data/backup_cred/$username.pub")
    bashio::log.info "The ssh public key is: $pubkey"
    bashio::exit.ok
    fi
else
    mkdir -p /data/backup_cred
    # Creating required folder for ssh-copy-id
    ssh-keygen -t ed25519 -C "$username" -f /data/backup_cred/$username -P ""
    # Use command permitted i authorized key fila: https://www.ssh.com/academy/ssh/authorized-keys-file
    eval "$(ssh-agent -s)"
    ssh-add /data/backup_cred/$username

    #Print the SSH public key
    pubkey=$(cat "/data/backup_cred/$username.pub")
    bashio::log.info "The ssh public key is: $pubkey"
fi

