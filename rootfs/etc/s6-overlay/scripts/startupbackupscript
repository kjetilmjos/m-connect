#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Add-on: m-connect
# Creates the backup configuration
# ==============================================================================
declare backup_enable
declare username
declare password
declare host
backup_enable=false

# Get config input from addon UI
if bashio::config.has_value "server.enable_backup"; then
    backup_enable=$(bashio::config "server.enable_backup")
fi
#bashio::exit.die_if_false $backup_enable "Backup is disabled. Backup startup script will stop"
if [[ $backup_enable = false ]]; then
    bashio::log.warning
    bashio::log.warning "Backup is disabled. Backup startup script will exit"
    bashio::log.warning
    bashio::exit.ok
fi

if bashio::config.has_value "server.username"; then
    username=$(bashio::config "server.username")
fi
if bashio::config.has_value "server.password"; then
    password=$(bashio::config "server.password")
fi
if bashio::config.has_value "server.host"; then
    host=$(bashio::config "server.host")
fi

# If private key is already existing, don't create a new one
if bashio::fs.file_exists "/data/m-connect/$username"; then
    bashio::log.info "An existing ssh key was found. A new one will not be generated"
    bashio::exit.ok
fi

ssh-keygen -t ed25519 -C "$username" -f /data/m-connect/$username -P ""
# Bruk command permitted i authorized key fila: https://www.ssh.com/academy/ssh/authorized-keys-file
eval "$(ssh-agent -s)"
ssh-add /data/m-connect/$username
sshpass -p "$password" ssh-copy-id -o "StrictHostKeyChecking no" -i ~/.ssh/$username $username@$host

bashio::exit.ok